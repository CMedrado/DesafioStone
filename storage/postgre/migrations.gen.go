// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/0001_create_account_table.down.sql (30B)
// migrations/0001_create_account_table.up.sql (279B)
// migrations/0002_create_token_table.down.sql (28B)
// migrations/0002_create_token_table.up.sql (240B)
// migrations/0003_create_transfer_table.down.sql (31B)
// migrations/0003_create_transfer_table.up.sql (446B)

package postgre

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_create_account_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\xb6\x06\x04\x00\x00\xff\xff\x12\x35\x0c\x5f\x1e\x00\x00\x00")

func _0001_create_account_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_create_account_tableDownSql,
		"0001_create_account_table.down.sql",
	)
}

func _0001_create_account_tableDownSql() (*asset, error) {
	bytes, err := _0001_create_account_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create_account_table.down.sql", size: 30, mode: os.FileMode(436), modTime: time.Unix(1625580638, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0xc9, 0x6e, 0x89, 0x2e, 0x67, 0x3c, 0x4d, 0x0, 0xf4, 0xdd, 0xe1, 0x8f, 0xef, 0xcc, 0x37, 0x7a, 0xcb, 0x35, 0x84, 0xdc, 0x2c, 0xc0, 0x1f, 0x59, 0x62, 0x53, 0x11, 0x40, 0x68, 0x68, 0x7a}}
	return a, nil
}

var __0001_create_account_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8c\xc1\x4a\xc4\x30\x14\x45\xf7\xf9\x8a\xcb\xac\x14\xf4\x0b\x66\x15\xc7\xa7\xf3\xb0\x4d\xc7\xe4\x45\x67\xdc\x48\x4c\x23\x0c\x68\x5b\x9a\xf4\xff\x85\x56\x5c\x58\x66\x79\x39\xe7\xdc\x9d\x25\x2d\x04\x3a\x0a\x19\xc7\x8d\x01\x3f\xc0\x34\x02\x3a\xb2\x13\x87\xcd\x34\x9d\xdb\xdb\x3e\xe7\x61\xb3\x55\xea\x57\x16\x7d\x57\xd1\x3f\x31\xc4\xd8\x4f\x5d\xc9\xb8\x52\x00\x70\x6e\xe1\x3d\xdf\xe3\x60\xb9\xd6\xf6\x84\x27\x3a\xdd\xcc\xa0\x0b\xdf\x09\x2f\xda\xee\xf6\xda\xce\xbd\xf1\x55\xb5\xa0\x38\x7c\xae\x08\xbc\xe1\x67\x4f\x8b\x90\x53\x1c\x53\xb9\x50\x7f\x84\xaf\xd0\xc5\x04\x36\x42\x8f\xb4\xfa\x1e\x53\x28\xa9\x7d\x0f\x05\xc2\x35\x39\xd1\xf5\x01\xaf\x2c\xfb\x79\xe2\xad\x31\xf4\x57\xa8\xeb\xad\xfa\x09\x00\x00\xff\xff\xc2\x94\xbf\xa9\x17\x01\x00\x00")

func _0001_create_account_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_create_account_tableUpSql,
		"0001_create_account_table.up.sql",
	)
}

func _0001_create_account_tableUpSql() (*asset, error) {
	bytes, err := _0001_create_account_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_create_account_table.up.sql", size: 279, mode: os.FileMode(436), modTime: time.Unix(1626715372, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x4c, 0x1a, 0xe, 0x22, 0x83, 0x83, 0x16, 0xad, 0x35, 0x6d, 0xf, 0x5c, 0x5e, 0x46, 0x7d, 0xb3, 0x63, 0xa8, 0x27, 0xed, 0xfc, 0xd9, 0x4e, 0xa1, 0xc0, 0xb0, 0x99, 0x44, 0x71, 0x4c, 0x83}}
	return a, nil
}

var __0002_create_token_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\xc9\xcf\x4e\xcd\x2b\xb6\x06\x04\x00\x00\xff\xff\x2b\xef\x20\x7a\x1c\x00\x00\x00")

func _0002_create_token_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_create_token_tableDownSql,
		"0002_create_token_table.down.sql",
	)
}

func _0002_create_token_tableDownSql() (*asset, error) {
	bytes, err := _0002_create_token_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_create_token_table.down.sql", size: 28, mode: os.FileMode(436), modTime: time.Unix(1625580638, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x1b, 0x56, 0x15, 0x60, 0x52, 0x46, 0x8c, 0xc1, 0x85, 0x74, 0x6a, 0xf9, 0xef, 0x50, 0x8f, 0x25, 0xfc, 0x61, 0xb4, 0xa, 0x7, 0xc6, 0x77, 0x1c, 0x39, 0xd3, 0xd3, 0xea, 0x22, 0xd2, 0x2b}}
	return a, nil
}

var __0002_create_token_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x86\x30\x10\x84\xef\x3e\xc5\x1c\x15\xfa\x06\x3d\xa5\x76\x6d\x97\x6a\x22\xc9\x4a\x6b\x2f\x41\x34\x85\x22\x28\x68\x4a\x5f\xbf\x18\x2b\xff\xbf\xb7\xd9\x99\xd9\xfd\x4a\x4b\x4a\x08\xa2\x9e\x6a\x02\x57\xd0\x46\x40\x1f\xec\xc4\x21\xae\x73\x58\xf6\x3c\x03\x80\xef\xc9\x27\x89\xae\xe3\x67\xb4\x96\x1b\x65\x7b\xbc\x51\xff\x70\xd9\xc3\x38\xae\x3f\x4b\x3c\x03\xc7\x15\xdd\xd5\xf5\xe9\x8e\x5b\x18\x62\x98\xfc\x10\x21\xdc\x90\x13\xd5\xb4\x78\x67\x79\x4d\x12\x9f\x46\xd3\x5d\x23\x55\x4a\xa3\x9d\x58\xc5\x5a\x4e\x0c\xbf\xfe\x2e\x61\xbb\x9e\xf8\xaf\x39\xa5\x8e\xa9\x8c\x25\x7e\xd1\x07\x0b\xf2\x1b\x47\x01\x4b\x15\x59\xd2\x25\x39\xfc\xef\xf6\xac\x78\xfc\x0b\x00\x00\xff\xff\x8d\xf9\xb9\x1c\xf0\x00\x00\x00")

func _0002_create_token_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0002_create_token_tableUpSql,
		"0002_create_token_table.up.sql",
	)
}

func _0002_create_token_tableUpSql() (*asset, error) {
	bytes, err := _0002_create_token_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0002_create_token_table.up.sql", size: 240, mode: os.FileMode(436), modTime: time.Unix(1626718647, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc0, 0xb7, 0xd9, 0x77, 0x82, 0x6e, 0xad, 0x1e, 0x4f, 0x88, 0x7a, 0x97, 0x74, 0xad, 0xec, 0x8d, 0x42, 0x76, 0x39, 0x34, 0x92, 0x18, 0x6d, 0x47, 0xc5, 0x7d, 0x15, 0xf2, 0x4b, 0x86, 0xca, 0x42}}
	return a, nil
}

var __0003_create_transfer_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x29\x4a\xcc\x2b\x4e\x4b\x2d\x2a\xb6\x06\x04\x00\x00\xff\xff\x9f\x5c\x6f\x39\x1f\x00\x00\x00")

func _0003_create_transfer_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0003_create_transfer_tableDownSql,
		"0003_create_transfer_table.down.sql",
	)
}

func _0003_create_transfer_tableDownSql() (*asset, error) {
	bytes, err := _0003_create_transfer_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0003_create_transfer_table.down.sql", size: 31, mode: os.FileMode(436), modTime: time.Unix(1625580638, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0xaa, 0x2, 0x1a, 0x70, 0x62, 0xf1, 0xed, 0xe5, 0x5f, 0x99, 0x50, 0x36, 0x7d, 0x42, 0xfc, 0x94, 0x66, 0xf, 0x2f, 0x75, 0x69, 0x41, 0xc, 0x3f, 0x34, 0xd5, 0x2d, 0x43, 0xe1, 0x57, 0x36}}
	return a, nil
}

var __0003_create_transfer_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xd1\x4e\x84\x30\x10\x45\xdf\xf7\x2b\xee\xe3\x6e\xe2\x4f\x54\x1c\xd6\x89\x50\x36\xd3\x21\xba\xbe\x34\x0d\xb0\xa6\x31\x42\x02\xf5\xff\x0d\xa8\x1b\x23\x18\xfb\xd6\xde\x33\x3d\x73\x33\x21\xa3\x04\x35\xb7\x05\x81\x73\xd8\x4a\x41\x4f\xec\xd4\x21\x8d\xa1\x9f\x2e\xdd\x38\xed\x77\x00\x10\x5b\xd4\x35\xdf\xe1\x24\x5c\x1a\x39\xe3\x81\xce\x37\x4b\x30\x8c\xf1\x25\xf6\x3e\x34\xcd\xf0\xde\x27\xff\xcd\xcd\x3f\xd9\xba\x28\x3e\xa1\xb6\x9b\x52\xec\x43\x8a\xc3\x7f\x64\x78\x9b\x43\xb0\x55\x3a\x92\xfc\x0a\x9b\xb1\x0b\xa9\x6b\x7d\x48\x50\x2e\xc9\xa9\x29\x4f\x78\x64\xbd\x5f\xae\x78\xae\x2c\xfd\x98\x58\x46\xb2\xca\x3a\x15\xc3\x56\x71\xad\xe4\x57\x3b\xfb\xcb\xeb\x42\xcf\x27\xaf\x84\xf8\x68\xe7\x86\xd8\xaf\xc8\x03\x84\x72\x12\xb2\x19\x39\x7c\x3d\x4f\x6b\xd7\x55\xb5\xdd\xfc\x4f\xdf\x36\xbe\x29\xdd\x1d\x3e\x02\x00\x00\xff\xff\x38\xf6\x4e\x6c\xbe\x01\x00\x00")

func _0003_create_transfer_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0003_create_transfer_tableUpSql,
		"0003_create_transfer_table.up.sql",
	)
}

func _0003_create_transfer_tableUpSql() (*asset, error) {
	bytes, err := _0003_create_transfer_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0003_create_transfer_table.up.sql", size: 446, mode: os.FileMode(436), modTime: time.Unix(1626794334, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0xbe, 0x88, 0x57, 0x30, 0x38, 0x38, 0x0, 0xf, 0x2a, 0x13, 0x82, 0xe3, 0xf7, 0x21, 0x3d, 0x5, 0x69, 0xbb, 0x5c, 0x82, 0x56, 0xcc, 0x44, 0x48, 0x44, 0x31, 0x62, 0xb9, 0x66, 0x6b, 0x73}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_create_account_table.down.sql": _0001_create_account_tableDownSql,

	"0001_create_account_table.up.sql": _0001_create_account_tableUpSql,

	"0002_create_token_table.down.sql": _0002_create_token_tableDownSql,

	"0002_create_token_table.up.sql": _0002_create_token_tableUpSql,

	"0003_create_transfer_table.down.sql": _0003_create_transfer_tableDownSql,

	"0003_create_transfer_table.up.sql": _0003_create_transfer_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_create_account_table.down.sql":  &bintree{_0001_create_account_tableDownSql, map[string]*bintree{}},
	"0001_create_account_table.up.sql":    &bintree{_0001_create_account_tableUpSql, map[string]*bintree{}},
	"0002_create_token_table.down.sql":    &bintree{_0002_create_token_tableDownSql, map[string]*bintree{}},
	"0002_create_token_table.up.sql":      &bintree{_0002_create_token_tableUpSql, map[string]*bintree{}},
	"0003_create_transfer_table.down.sql": &bintree{_0003_create_transfer_tableDownSql, map[string]*bintree{}},
	"0003_create_transfer_table.up.sql":   &bintree{_0003_create_transfer_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
